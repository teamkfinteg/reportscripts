# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
     # - uses: actions/github-script@v6

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      # checks some repo info using curl
      - name: Check the reportsscript repo
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/fiddlermikey/reportscripts

      # checks some repo info using curl
      - name: Check the keyfactor org repos
        run: |
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/keyfactor/repos

      # Testing with gh scripting
      - name: Check using github-script 1
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const rname = context.payload.repository.name
            console.log(`${ rname }`)
      - name: Check using github-script 2
        uses: actions/github-script@v4.0.2
        with:
          script: |
            const response = await github.repos.listForOrg({ org: 'keyfactor' })
            console.log(response)
            const result = await response.json()
#            result.forEach(i => {
#              console.log(i.html_url)
#              console.log(i.full_name)
#            })




 